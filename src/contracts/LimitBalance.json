{
  "contractName": "LimitBalance",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506040516020806100e7833981018060405281019080805190602001909291905050508060008190555050609e806100496000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a4d66daf146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a723058201cd22456eebd65b69db02651f605324f634041b0e297d7b43138810a0dfe6c4b0029",
  "deployedBytecode": "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a4d66daf146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a723058201cd22456eebd65b69db02651f605324f634041b0e297d7b43138810a0dfe6c4b0029",
  "sourceMap": "345:401:72:-;;;521:70;8:9:-1;5:2;;;30:1;27;20:12;5:2;521:70:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;580:6;572:5;:14;;;;521:70;345:401;;;;;;",
  "deployedSourceMap": "345:401:72:-;;;;;;;;;;;;;;;;;;;;;;;;372:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;372:20:72;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.4.18;\n\n\n/**\n * @title LimitBalance\n * @dev Simple contract to limit the balance of child contract.\n * @dev Note this doesn't prevent other contracts to send funds by using selfdestruct(address);\n * @dev See: https://github.com/ConsenSys/smart-contract-best-practices#remember-that-ether-can-be-forcibly-sent-to-an-account\n */\ncontract LimitBalance {\n\n  uint256 public limit;\n\n  /**\n   * @dev Constructor that sets the passed value as a limit.\n   * @param _limit uint256 to represent the limit.\n   */\n  function LimitBalance(uint256 _limit) public {\n    limit = _limit;\n  }\n\n  /**\n   * @dev Checks if limit was reached. Case true, it throws.\n   */\n  modifier limitedPayable() {\n    require(this.balance <= limit);\n    _;\n\n  }\n\n}\n",
  "sourcePath": "D:\\dev\\tokenmint\\contracts\\tokenmarketnet-contracts\\contracts\\zeppelin\\contracts\\LimitBalance.sol",
  "ast": {
    "absolutePath": "/D/dev/tokenmint/contracts/tokenmarketnet-contracts/contracts/zeppelin/contracts/LimitBalance.sol",
    "exportedSymbols": {
      "LimitBalance": [
        10786
      ]
    },
    "id": 10787,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10762,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:72"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title LimitBalance\n@dev Simple contract to limit the balance of child contract.\n@dev Note this doesn't prevent other contracts to send funds by using selfdestruct(address);\n@dev See: https://github.com/ConsenSys/smart-contract-best-practices#remember-that-ether-can-be-forcibly-sent-to-an-account",
        "fullyImplemented": true,
        "id": 10786,
        "linearizedBaseContracts": [
          10786
        ],
        "name": "LimitBalance",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10764,
            "name": "limit",
            "nodeType": "VariableDeclaration",
            "scope": 10786,
            "src": "372:20:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10763,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "372:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10773,
              "nodeType": "Block",
              "src": "566:25:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10771,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10769,
                      "name": "limit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10764,
                      "src": "572:5:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10770,
                      "name": "_limit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10766,
                      "src": "580:6:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "572:14:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10772,
                  "nodeType": "ExpressionStatement",
                  "src": "572:14:72"
                }
              ]
            },
            "documentation": "@dev Constructor that sets the passed value as a limit.\n@param _limit uint256 to represent the limit.",
            "id": 10774,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "LimitBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10766,
                  "name": "_limit",
                  "nodeType": "VariableDeclaration",
                  "scope": 10774,
                  "src": "543:14:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10765,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "543:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "542:16:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 10768,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "566:0:72"
            },
            "scope": 10786,
            "src": "521:70:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10784,
              "nodeType": "Block",
              "src": "694:49:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10780,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10777,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18076,
                            "src": "708:4:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LimitBalance_$10786",
                              "typeString": "contract LimitBalance"
                            }
                          },
                          "id": 10778,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "708:12:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 10779,
                          "name": "limit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10764,
                          "src": "724:5:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "708:21:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 10776,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        17888,
                        17889
                      ],
                      "referencedDeclaration": 17888,
                      "src": "700:7:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 10781,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "700:30:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10782,
                  "nodeType": "ExpressionStatement",
                  "src": "700:30:72"
                },
                {
                  "id": 10783,
                  "nodeType": "PlaceholderStatement",
                  "src": "736:1:72"
                }
              ]
            },
            "documentation": "@dev Checks if limit was reached. Case true, it throws.",
            "id": 10785,
            "name": "limitedPayable",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 10775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "691:2:72"
            },
            "src": "668:75:72",
            "visibility": "internal"
          }
        ],
        "scope": 10787,
        "src": "345:401:72"
      }
    ],
    "src": "0:747:72"
  },
  "legacyAST": {
    "absolutePath": "/D/dev/tokenmint/contracts/tokenmarketnet-contracts/contracts/zeppelin/contracts/LimitBalance.sol",
    "exportedSymbols": {
      "LimitBalance": [
        10786
      ]
    },
    "id": 10787,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10762,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:72"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title LimitBalance\n@dev Simple contract to limit the balance of child contract.\n@dev Note this doesn't prevent other contracts to send funds by using selfdestruct(address);\n@dev See: https://github.com/ConsenSys/smart-contract-best-practices#remember-that-ether-can-be-forcibly-sent-to-an-account",
        "fullyImplemented": true,
        "id": 10786,
        "linearizedBaseContracts": [
          10786
        ],
        "name": "LimitBalance",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10764,
            "name": "limit",
            "nodeType": "VariableDeclaration",
            "scope": 10786,
            "src": "372:20:72",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10763,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "372:7:72",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10773,
              "nodeType": "Block",
              "src": "566:25:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10771,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 10769,
                      "name": "limit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10764,
                      "src": "572:5:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 10770,
                      "name": "_limit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10766,
                      "src": "580:6:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "572:14:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10772,
                  "nodeType": "ExpressionStatement",
                  "src": "572:14:72"
                }
              ]
            },
            "documentation": "@dev Constructor that sets the passed value as a limit.\n@param _limit uint256 to represent the limit.",
            "id": 10774,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "LimitBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10766,
                  "name": "_limit",
                  "nodeType": "VariableDeclaration",
                  "scope": 10774,
                  "src": "543:14:72",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10765,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "543:7:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "542:16:72"
            },
            "payable": false,
            "returnParameters": {
              "id": 10768,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "566:0:72"
            },
            "scope": 10786,
            "src": "521:70:72",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10784,
              "nodeType": "Block",
              "src": "694:49:72",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10780,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10777,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 18076,
                            "src": "708:4:72",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LimitBalance_$10786",
                              "typeString": "contract LimitBalance"
                            }
                          },
                          "id": 10778,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "708:12:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 10779,
                          "name": "limit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10764,
                          "src": "724:5:72",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "708:21:72",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 10776,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        17888,
                        17889
                      ],
                      "referencedDeclaration": 17888,
                      "src": "700:7:72",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 10781,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "700:30:72",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10782,
                  "nodeType": "ExpressionStatement",
                  "src": "700:30:72"
                },
                {
                  "id": 10783,
                  "nodeType": "PlaceholderStatement",
                  "src": "736:1:72"
                }
              ]
            },
            "documentation": "@dev Checks if limit was reached. Case true, it throws.",
            "id": 10785,
            "name": "limitedPayable",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 10775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "691:2:72"
            },
            "src": "668:75:72",
            "visibility": "internal"
          }
        ],
        "scope": 10787,
        "src": "345:401:72"
      }
    ],
    "src": "0:747:72"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-12-14T14:51:44.026Z"
}